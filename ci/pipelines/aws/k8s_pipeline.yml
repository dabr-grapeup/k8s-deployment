---
resource_types:
- name: locker
  type: docker-image
  source:
    repository: cfcommunity/locker-resource


resources:
- name: pipeline_lock
  type: locker
  source:
    locker_uri: ((locker_url))
    username: ((locker_username))
    password: ((locker_password))
    lock_name: ((env_name))-((deployment_name))-((pipeline_name))
    skip_ssl_validation: true

- name: deployment_lock
  type: locker
  source:
    locker_uri: ((locker_url))
    username: ((locker_username))
    password: ((locker_password))
    lock_name: ((env_name))-((deployment_name))
    skip_ssl_validation: true

- name: env_lock
  type: locker
  source:
    locker_uri: ((locker_url))
    username: ((locker_username))
    password: ((locker_password))
    lock_name: ((env_name))
    skip_ssl_validation: true

- name: infrastructure_image
  type: docker-image
  source:
    repository: ((docker_url)):5000/infrastructure
    insecure_registries: [ "((docker_url)):5000" ]
    username: ((docker_username))
    password: ((docker_password))

- name: trigger
  type: time
  source: {interval: 24000h}

- name: k8s_deployment
  type: git
  source:
    uri: ((repo_url))
    private_key: ((repo_private_key))
    branch: ((repo_version))

- name: bosh_state
  type: s3
  source:
    bucket: ((bosh_state_bucket_name))
    versioned_file: ((bosh_state_filename))
    access_key_id: ((bosh_state_s3_access_key))
    secret_access_key: ((bosh_state_s3_secret_key))
    region_name: ((bosh_state_s3_region))

- name: terraform_state
  type: s3
  source:
    bucket: ((terraform_state_bucket_name))
    versioned_file: ((terraform_state_filename))
    access_key_id: ((terraform_state_s3_access_key))
    secret_access_key: ((terraform_state_s3_secret_key))
    region_name: ((terraform_state_s3_region))

jobs:
- name: acquire_locks
  serial: true
  plan:
  - get: k8s_deployment
    trigger: ((trigger_on_repo_change))

  - put: pipeline_lock
    params:
      key: first
      lock_op: lock
    on_success:
      put: pipeline_lock
      params:
        key: first
        lock_op: unlock

  - put: pipeline_lock
    params:
      key: second
      lock_op: lock

  - put: deployment_lock
    params:
      key: ((pipeline_name))
      lock_op: lock
    on_failure: &release_pipeline_lock
      put: pipeline_lock
      params:
        key: second
        lock_op: unlock
    on_abort: *release_pipeline_lock

  - put: env_lock
    params:
      key: ((concurrent_deployments_name))
      lock_op: lock
      locked_by: ((deployment_name))
    on_failure: &release_pipeline_and_deployment_locks
      put: deployment_lock
      params:
        key: ((pipeline_name))
        lock_op: unlock
      ensure: *release_pipeline_lock
    on_abort: *release_pipeline_and_deployment_locks

  - put: trigger
    on_failure: &release_locks
      put: env_lock
      params:
        key: ((concurrent_deployments_name))
        lock_op: unlock
        locked_by: ((deployment_name))
      ensure: *release_pipeline_and_deployment_locks
    on_abort: *release_locks

- name: deploy_k8s
  serial: true
  on_failure: *release_locks
  on_abort: *release_locks
  plan:
  - aggregate:
    - get: trigger
      passed: [ acquire_locks ]
      trigger: true
    - get: k8s_deployment
      passed: [ acquire_locks ]
    - get: bosh_state
    - get: terraform_state
    - get: infrastructure_image

  - task: deploy_k8s
    image: infrastructure_image
    file: k8s_deployment/ci/tasks/deploy_k8s/deploy_k8s.yml
    params:
      ENV_NAME: ((env_name))
      BACKEND: aws
      TERRAFORM_STATE_FILENAME: ((terraform_state_filename))
      BOSH_STATE_FILENAME: ((bosh_state_filename))

- name: setup_k8s
  serial: true
  on_failure: *release_locks
  on_abort: *release_locks
  plan:
  - aggregate:
    - get: trigger
      passed: [ deploy_k8s ]
      trigger: true
    - get: k8s_deployment
      passed: [ deploy_k8s ]
    - get: bosh_state
    - get: terraform_state
    - get: infrastructure_image

  - task: setup_k8s
    image: infrastructure_image
    file: k8s_deployment/ci/tasks/setup_k8s/setup_k8s.yml
    params:
      BOSH_STATE_FILENAME: ((bosh_state_filename))
      TERRAFORM_STATE_FILENAME: ((terraform_state_filename))
      BACKEND: aws

      CREDHUB_URL: ((credhub_url))
      CREDHUB_TEAM: ((credhub_username))
      CREDHUB_USERNAME: ((credhub_username))
      CREDHUB_PASSWORD: ((credhub_password))

- name: configure_jumpbox_k8s
  serial: true
  ensure: *release_locks
  plan:
  - aggregate:
    - get: trigger
      passed: [ setup_k8s ]
      trigger: true
    - get: k8s_deployment
      passed: [ setup_k8s ]
    - get: terraform_state
    - get: infrastructure_image

  - task: configure_jumpbox
    image: infrastructure_image
    file: k8s_deployment/ci/tasks/configure_jumpbox/configure_jumpbox.yml
    params:
      JUMPBOX_PRIVATE_KEY: ((jumpbox_private_key))
      TERRAFORM_STATE_FILENAME: ((terraform_state_filename))

- name: release_locks
  serial: true
  plan:
  - *release_locks


groups:
- name: deploy
  jobs:
  - acquire_locks
  - deploy_k8s
  - setup_k8s
  - configure_jumpbox_k8s

- name: release_locks
  jobs:
  - release_locks
